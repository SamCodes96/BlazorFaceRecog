@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor.Utilities
@using System.Threading

@inject HttpClient Http

<MudPaper class="pa-2" Elevation="0" Style=@($"border: 1px solid var({borderColour})")>
    <MudForm Model=Model @ref=@_form Validation="_validator.ValidateValue">
        <MudStack Spacing="0">
            <MudIconButton Icon=@(isDeleted ? Icons.Material.Filled.Refresh : Icons.Material.Filled.Close)
                           Size=@Size.Small
                           Class="align-self-end mb-4"
                           OnClick=@Remove />
            <MudStack Spacing="0" Style="height:86px; align-items:center">
                <MudElement HtmlTag="div" Style="height: 100%;">
                    @if (Model.Thumbnail != null)
                    {
                        <MudImage Src=@($"data:image /jpeg;base64, {Model.Thumbnail}") Style=@($"height:100%; aspect-ratio:1/1; {imageDisabled}") />
                    }
                    else if (Model.SelectedFile != null)
                    {
                        <MudStack Spacing="0" Style="height: 100%;">
                            <MudProgressCircular Color=Color.Primary Size=Size.Medium Indeterminate=true Class="my-auto" />
                        </MudStack>
                    }
                    <MudFileUpload T=IBrowserFile
                                   For=@(() => Model.SelectedFile)
                                   @bind-Files=Model.SelectedFile
                                   @ref=_file
                                   OnFilesChanged=@GetFaceFromImage
                                   ErrorText=@fileErrorText
                                   Error=@(fileErrorText != null)
                                   Style="align-items:center"
                                   Accept=".jpg">
                        <ButtonTemplate>
                            @if (Model.Thumbnail == null && Model.SelectedFile == null)
                            {
                                <MudIconButton HtmlTag="label"
                                               Icon=@Icons.Material.Filled.FileOpen
                                               Size=@Size.Large
                                               for=@context.Id />
                            }
                        </ButtonTemplate>
                    </MudFileUpload>
                </MudElement>
                @if (!_file.HasErrors && Model.Thumbnail == null)
                {
                    <MudText Typo=@Typo.body2
                             Align=@Align.Center>Select an image</MudText>
                }
            </MudStack>
            <MudTextField Label="Name"
                          For=@(() => Model.Name)
                          @bind-Value=Model.Name
                          @ref=_name
                          Disabled=isDeleted
                          OnBlur=StateHasChanged />
        </MudStack>
    </MudForm>
</MudPaper>

@code {
    [Parameter, EditorRequired]
    public EventCallback OnRemove { get; init; }

    [Parameter]
    public FaceCardViewModel Model { get; init; } = new();

    private FaceModelFluentValidator _validator = new();

    private MudForm _form = new();

    private MudTextField<string?> _name = new();

    private MudFileUpload<IBrowserFile> _file = new();

    private string? _fileFailureErrorOverride;

    private string imageDisabled => isDeleted
        ? "Opacity: 0.5;"
        : string.Empty;

    private string borderColour => (_name.HasErrors || _file.HasErrors) && !isDeleted
        ? "--mud-palette-error"
        : "--mud-palette-lines-default";

    private bool isDeleted => Model.State == CardState.Deleted;

    private string? fileErrorText => _fileFailureErrorOverride ?? _file.GetErrorText();

    public async Task<bool> Validate()
    {
        await _form.Validate();
        StateHasChanged();

        return _form.IsValid;
    }

    private void Remove()
    {
        OnRemove.InvokeAsync();
    }

    private async Task GetFaceFromImage(InputFileChangeEventArgs e)
    {
        _fileFailureErrorOverride = null;

        StateHasChanged();

        var image = await GetFileContent(e.File);
        var payload = new DetectFaceModel(Model.Id, image);

        var response = await Http.PostAsJsonAsync("Faces/Detect", payload);
        var content = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            Model.Thumbnail = content;
        }
        else
        {
            Model.SelectedFile = null;
            _fileFailureErrorOverride = $"Failed: {content}";
        }

        StateHasChanged();
    }

    private static async Task<byte[]> GetFileContent(IBrowserFile file)
    {
        using var ms = new MemoryStream();
        using var fileStream = file.OpenReadStream(2000 * 1024 * 1024);

        await fileStream.CopyToAsync(ms);

        return ms.ToArray();
    }
}