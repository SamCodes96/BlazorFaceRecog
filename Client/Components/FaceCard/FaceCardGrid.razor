@using System;
@using System.Linq.Expressions

@inject HttpClient Http

<MudGrid Spacing="2" Justify="Justify.Center">
    @if (_loadState == GridLoadState.Loaded)
    {
        if (_items.Count > 0)
        {
            foreach (var item in _items)
            {
                var model = item.Key;

                <MudItem @key=model.Id>
                    <FaceCard 
                        @ref=_items[model] 
                        Model=model 
                        OnRemove=@(async() => await RemoveAsync(model)) />
                </MudItem>
            }
        }
        else
        {
            <MudText Typo=@Typo.body1>No faces saved.</MudText>
        }
    }
    else if (_loadState == GridLoadState.NotLoaded)
    {
        <MudProgressCircular Color=Color.Primary 
                             Size=Size.Large 
                             Indeterminate=true />
    }
    else
    {
        <MudText Typo=@Typo.body1>Failed to load saved faces.</MudText>
    }
</MudGrid>

@code {
    private GridLoadState _loadState;

    private readonly Dictionary<FaceCardViewModel, FaceCard> _items = [];

    private readonly List<Guid> _initialItemIds = [];

    public void AddNew()
    {
        _items.Add(new(), new());
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var req = await Http.GetAsync("Faces");
            req.EnsureSuccessStatusCode();

            var savedFaces = await req.Content.ReadFromJsonAsync<SavedFaceModel[]>() ?? [];

            foreach (var item in savedFaces)
            {
                var viewModel = FaceCardViewModel.FromSaveModel(item);
                _items.Add(viewModel, new());
                _initialItemIds.Add(viewModel.Id);
            }

            _loadState = GridLoadState.Loaded;
        }
        catch
        {
            _loadState = GridLoadState.Errored;
        }

        StateHasChanged();
    }

    public async Task<bool> ValidateCardsAsync()
    {
        foreach (var item in _items)
        {
            var result = await item.Value.ValidateAsync();
            if (!result)
                return false;
        }

        return true;
    }

    public IEnumerable<TrainFaceModel> GetModels()
    {
        foreach (var item in _items)
        {
            var model = item.Value.Model;
            if (model.State != CardState.Deleted)
                yield return item.Value.Model.ToTrainModel();
        }
    }

    public bool HasChanges()
    {
        var current = _items.Select(x => x.Value.Model.Id);

        return !Enumerable.SequenceEqual(current, _initialItemIds);
    }

    private async Task RemoveAsync(FaceCardViewModel model)
    {
        switch (model.State)
        {
            case CardState.Unsaved:
                _items.Remove(model);
                break;
            case CardState.Saved:
                model.State = CardState.Deleted;
                await _items[model].ValidateAsync();
                break;
            case CardState.Deleted:
                model.State = CardState.Saved;
                await _items[model].ValidateAsync();
                break;
        }

        StateHasChanged();
    }
}