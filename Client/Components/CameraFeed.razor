@using System.Text.RegularExpressions

@implements IAsyncDisposable

@inject IJSRuntime JS

@if (WebcamStarted)
{
    <div style="position: relative; width: 100%; margin-top: 20px">
        <video id="videoFeed" style="width: 100%; height: 100%"></video>
        <canvas id="faceHighlight" style="width: 100%; height: 100%; position: absolute; left: 0; z-index: 1"></canvas>
    </div>
}
else
{
    <MudStack Style="align-items: center">
        <MudSpacer />
        <MudText Typo=@Typo.h2
                 Align=@Align.Center>Waiting for Webcam</MudText>
        <MudSpacer />
            <MudProgressCircular Color=Color.Primary
                                 Size=Size.Large
                                 Indeterminate=true />
    </MudStack>
}

@code {
    private record class JSImage(string DataUrl);

    public bool WebcamStarted { get; private set; }

    private IJSObjectReference _module = default!;

    protected override async Task OnInitializedAsync()
    {
        _module = await JS.InvokeAsync<IJSObjectReference>(
                "import", "./js/webcam.js");

        await _module.InvokeVoidAsync("startVideo", DotNetObjectReference.Create(this));
    }

    [Parameter]
    public EventCallback<bool> OnWebcamStart { get; set; }

    [JSInvokable]
    public async Task DisplayWebcam()
    {
        WebcamStarted = true;
        await OnWebcamStart.InvokeAsync();
    }

    public async Task<byte[]> ProcessFrame()
    {
        var result = await _module.InvokeAsync<IJSStreamReference>("getFrame");
        var stream = await result.OpenReadStreamAsync();
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        return ms.ToArray();
    }

    public async Task DrawOnFrameAsync(System.Drawing.Rectangle face)
    {
        await _module.InvokeVoidAsync("drawOnFrame", face.X, face.Y, face.Width, face.Height);
    }

    public async Task ClearFaceHighlightAsync()
    {
        await _module.InvokeVoidAsync("clearFrame");
    }

    public async ValueTask DisposeAsync()
    {
        await _module.DisposeAsync();
    }
}