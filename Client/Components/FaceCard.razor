@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor.Utilities

@inject HttpClient Http

<MudPaper Class="pa-2" Elevation="0" Outlined="true">
    <MudStack Spacing="0">
        <MudIconButton Icon=@Icons.Material.Filled.Close
                       Size=@Size.Small
                       Class="align-self-end mb-4"
                       OnClick=@Remove />
        <MudStack Spacing="0" Style="height:86px">
            <MudElement HtmlTag="div" Class="align-self-center" Style="height: 100%;">
                @if (_previewImage != null)
                {
                    <MudImage Src=@($"data:image /jpeg;base64, {_previewImage}") Style="height:100%; aspect-ratio:1/1;"/>
                }
                else if (_faceCardState == FaceCardState.Selected)
                {
                    <MudStack Spacing="0" Style="height: 100%;">
                        <MudProgressCircular Color=Color.Primary Size=Size.Medium Indeterminate=true Class="my-auto"/>
                    </MudStack>
                }
                <MudFileUpload T=IBrowserFile
                               For=@(() => _file)
                               @bind-Files=_file
                               OnFilesChanged=@GetFaceFromImage>
                    <ButtonTemplate>
                        @if (_faceCardState != FaceCardState.Selected)
                        {
                            <MudIconButton HtmlTag="label"
                                           Icon=@Icons.Material.Filled.FileOpen
                                           Size=@Size.Large
                                           for=@context.Id />
                        }
                    </ButtonTemplate>
                </MudFileUpload>
            </MudElement>
            @if (_faceCardState == FaceCardState.Unselected)
            {
                <MudText Typo=@Typo.body2
                         Align=@Align.Center>Select an image</MudText>
            }
            else if (_faceCardState == FaceCardState.Failed)
            {
                <MudText Typo=@Typo.body2
                         Align=@Align.Center
                         Color=@Color.Error>Failed. Please try again.</MudText>
            }
        </MudStack>
        <MudTextField Label="Name"
                      For=@(() => _model.Name)
                      @bind-Value=_model.Name />
    </MudStack>
</MudPaper>

@code {
    public class FaceCardModel
    {
        public string Name { get; set; } = string.Empty;
        public byte[]? File { get; set; }
    };

    public enum FaceCardState
    {
        Unselected,
        Selected,
        Failed
    }

    [Parameter]
    public EventCallback OnRemove { get; set; }

    private FaceCardModel _model = new();

    private IBrowserFile? _file;

    private string? _previewImage;

    private FaceCardState _faceCardState;

    private void Remove()
    {
        OnRemove.InvokeAsync();
    }

    private async Task GetFaceFromImage(InputFileChangeEventArgs e)
    {
        _faceCardState = FaceCardState.Selected;

        await InvokeAsync(StateHasChanged);

        var content = await GetFileContent(e.File);

        var response = await Http.PostAsJsonAsync("GetFace", content);

        if (response.IsSuccessStatusCode)
        {
            _previewImage = await response.Content.ReadAsStringAsync();

            _model.File = await response.Content.ReadAsByteArrayAsync();
        }
        else
        {
            _faceCardState = FaceCardState.Failed;
        }

        await InvokeAsync(StateHasChanged);
    }

    private static async Task<byte[]> GetFileContent(IBrowserFile file)
    {
        using var ms = new MemoryStream();
        using var fileStream = file.OpenReadStream(2000 * 1024 * 1024);

        await fileStream.CopyToAsync(ms);

        return ms.ToArray();
    }
}
