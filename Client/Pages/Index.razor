@page "/"

@inject IDialogService DialogService
@inject IFaceHubService FaceHubService
@inject ISnackbar Snackbar

<PageTitle>Blazor Face Recog</PageTitle>

<CameraFeed @ref=_cameraFeed OnWebcamStart=@StateHasChanged Quality="_quality"/>
@if(_cameraFeed?.WebcamStarted ?? false)
{
    <MudStack Row=true 
              AlignItems="AlignItems.Start" 
              Spacing="6">
        <MudStack Spacing="1">
            <MudStack Row=true>
                <MudButton OnClick=@(() => StartStopProcessingAsync())
                           Color=MudBlazor.Color.Primary
                           Variant=Variant.Filled>@(!_detectionActive ? "Start" : "Stop")</MudButton>
                <MudButton OnClick=OpenTrainDialogAsync
                           Disabled=_detectionActive
                           Color=MudBlazor.Color.Primary
                           Variant=Variant.Filled>Train</MudButton>
            </MudStack>
            @if (_detectionActive)
            {
                <MudText Typo=@Typo.subtitle2>
                    <p>Face: @(_analyzedImage?.Name ?? "No Face Detected")</p>
                    @if (_analyzedImage?.Score is > 0)
                    {
                        <p>Score: @_analyzedImage.Score</p>
                    }
                </MudText>
            }
        </MudStack>
        @if(_detectionActive)
        {
            <MudStack Spacing="0">
                <MudText>Scan Quality:</MudText>
                <MudSlider @bind-Value="_quality"
                           Min="0.1"
                           Max="1.0"
                           step="0.1"
                           Color="MudBlazor.Color.Primary"
                           Style="margin-top: 0px"></MudSlider>
            </MudStack>

        }
    </MudStack>
}
@code {
    private CameraFeed _cameraFeed = default!;

    private bool _detectionActive;

    private bool _isProcessing;

    private AnalyzedImage? _analyzedImage;

    private double _quality = 0.5;

    protected override void OnInitialized()
    {
        FaceHubService.OnResponseReceived += async analyzedImage =>
        {
            _analyzedImage = analyzedImage;

            if (_analyzedImage != null)
            {
                var face = _analyzedImage.Face;
                _ =_cameraFeed.DrawOnFrameAsync(face);
            }
            else
            {
                _ =_cameraFeed.ClearFaceHighlightAsync();
            }

            StateHasChanged();

            await Process();
        };

        FaceHubService.OnDisconnect += async (ex) =>
        {
            if (ex is not null)
            {
                _quality = 0.5;
                Snackbar.Add("An error occured. Connection to the server was lost.", MudBlazor.Severity.Error);

                if (_detectionActive)
                {
                    await StartStopProcessingAsync();
                    StateHasChanged();
                }
            }
        };
    }

    private async Task StartStopProcessingAsync()
    {
        if (!_detectionActive)
        {
            _detectionActive = true;
            await FaceHubService.StartConnectionAsync();

            await Process();
        }
        else
        {
            _detectionActive = false;
            _analyzedImage = null;

            await FaceHubService.EndConnectionAsync();
            _ =_cameraFeed.ClearFaceHighlightAsync();
        }
    }

    private async Task Process()
    {
        var bytes = await _cameraFeed.ProcessFrame();
        await FaceHubService.RecogniseFacesAsync(bytes);
    }

    private async Task OpenTrainDialogAsync()
    {
        await DialogService.ShowAsync<TrainFaceDialog>(TrainFaceDialog.Title);
    }
}