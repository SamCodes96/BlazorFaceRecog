@using System.Text.RegularExpressions
@using System.Drawing

@page "/"

@inject IDialogService DialogService
@inject FaceHubService FaceHubService

<PageTitle>Blazor Face Recog</PageTitle>

<CameraFeed @ref=_cameraFeed />
<MudStack Row=true>
    <MudButton OnClick=@(() => StartStopProcessing())
               Color=MudBlazor.Color.Primary
               Variant=Variant.Filled>@(!_isProcessing ? "Start" : "Stop")</MudButton>

    <MudButton OnClick=OpenTrainDialog
               Disabled=_isProcessing
               Color=MudBlazor.Color.Primary
               Variant=Variant.Filled>Train</MudButton>
</MudStack>

@if (_isProcessing)
{
    <MudText Typo=@Typo.subtitle2>
        Face: @(_analyzedImage?.Name ?? "Not recognised")
    </MudText>
}

@code {
    private CameraFeed _cameraFeed = new();

    private bool _isProcessing;

    private PeriodicTimer? _processTimer;

    private AnalyzedImage? _analyzedImage;

    protected override async Task OnInitializedAsync()
    {
        FaceHubService.OnResponseReceived += async analyzedImage =>
        {
            _analyzedImage = analyzedImage;

            if (_analyzedImage != null)
            {
                var face = _analyzedImage.Face;
                await _cameraFeed.DrawOnFrame(face);
            }
            else
            {
                await _cameraFeed.ClearFaceHighlight();
            }

            await InvokeAsync(StateHasChanged);
        };


        await FaceHubService.StartConnection();
    }

    private async Task StartStopProcessing()
    {
        if (!_isProcessing)
        {
            _isProcessing = true;
            _processTimer = new PeriodicTimer(TimeSpan.FromSeconds(0.5));

            while (await _processTimer.WaitForNextTickAsync())
            {
                var bytes = await _cameraFeed.ProcessFrame();
                await FaceHubService.RecogniseFaces(bytes);
            }
        }
        else
        {
            _isProcessing = false;
            _processTimer?.Dispose();
            _analyzedImage = null;
            await _cameraFeed.ClearFaceHighlight();
            await InvokeAsync(StateHasChanged);
        }
    }

    private void OpenTrainDialog()
    {
        DialogService.Show<TrainFaceDialog>(TrainFaceDialog.Title);
    }
}