@using System.Text.RegularExpressions
@using System.Drawing

@page "/"

@inject IJSRuntime JsRuntime
@inject IDialogService DialogService
@inject FaceHubService ImageService

<PageTitle>Blazor Face Recog</PageTitle>

<div style="position: relative; width: 100%; margin-top: 20px">
    <video id="videoFeed" style="width: 100%; height: 100%"></video>
    <canvas id="currentFrame" style="width:100%; height: 100%; position: absolute; left: 0; display:none;"></canvas>
    <canvas id="faceHighlight" style="width: 100%; height: 100%; position: absolute; left: 0; z-index: 1"></canvas>
</div>
<div>
    <MudButton OnClick=@(() => StartStopProcessing())
               Color=MudBlazor.Color.Primary
               Variant=Variant.Filled
    >@(!_isProcessing ? "Start" : "Stop")</MudButton>

    <MudButton OnClick=OpenTrainDialog
               Disabled=_isProcessing
               Color=MudBlazor.Color.Primary
               Variant=Variant.Filled
    >Train</MudButton>
</div>

@if (_isProcessing)
{
    <span>Face: @(_analyzedImage?.Name ?? "Not recognised") </span>
}

@code {

    private record class JSImage(string DataUrl, int Width, int Height);

    private bool _isProcessing;

    private PeriodicTimer? _processTimer;

    private AnalyzedImage? _analyzedImage;

    protected override async Task OnInitializedAsync()
    {
        ImageService.OnResponseReceived += async analyzedImage =>
        {
            _analyzedImage = analyzedImage;

            if (_analyzedImage != null)
            {
                var face = _analyzedImage.Face;
                await JsRuntime.InvokeVoidAsync("drawOnFrame", "faceHighlight", face.X, face.Y, face.Width, face.Height);
            }
            else
            {
                await ClearFaceHighlight();
            }

            await InvokeAsync(StateHasChanged);
        };

        await JsRuntime.InvokeVoidAsync("startVideo", "videoFeed");

        await ImageService.StartConnection();
    }

    private async Task StartStopProcessing()
    {
        if (!_isProcessing)
        {
            _isProcessing = true;
            _processTimer = new PeriodicTimer(TimeSpan.FromSeconds(0.2));

            while (await _processTimer.WaitForNextTickAsync())
            {
                await ProcessFrame();
            }
        }
        else
        {
            _isProcessing = false;
            _processTimer?.Dispose();
            _analyzedImage = null;
            await ClearFaceHighlight();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ProcessFrame()
    {
        var image = await JsRuntime.InvokeAsync<JSImage>("getFrame", "videoFeed", "currentFrame");

        var imageBytes = GetBytesFromDataUrl(image.DataUrl);

        await ImageService.RecogniseFaces(new ImageData(imageBytes, image.Width, image.Height));
    }

    private static byte[] GetBytesFromDataUrl(string dataUrl)
    {
        var base64Data = Regex.Match(dataUrl, "data:image/(?<type>.+?),(?<data>.+)").Groups["data"].Value;
        return Convert.FromBase64String(base64Data);
    }

    private async Task ClearFaceHighlight()
    {
        await JsRuntime.InvokeVoidAsync("clearFrame", "faceHighlight");
    }

    private void OpenTrainDialog()
    {
        DialogService.Show<TrainFaceDialog>("Train a face");
    }
}